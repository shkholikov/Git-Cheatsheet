{
	"GIT BASICS": [
		{
			"id": 1,
			"code": "git init <directory>",
			"description": "Create empty Git repo in specified directory. Run with no arguments to initialize the current directory as a git repository."
		},
		{
			"id": 2,
			"code": "git clone <repo>",
			"description": "Clone repo located at <repo> onto local machine. Original repo can be located on the local filesystem or on a remote machine via HTTP or SSH."
		},
		{
			"id": 3,
			"code": "git config user.name <name>",
			"description": "Define author name to be used for all commits in current repo. Devs commonly use --global flag to set config options for current user."
		},
		{
			"id": 4,
			"code": "git add <directory>",
			"description": "Stage all changes in <directory> for the next commit. Replace <directory> with a <file> to change a specific file."
		},
		{
			"id": 5,
			"code": "git commit -m \"<message>\"",
			"description": "Commit the staged snapshot, but instead of launching a text editor, use <message> as the commit message."
		},
		{
			"id": 6,
			"code": "git status",
			"description": "List which files are staged, unstaged, and untracked."
		},
		{
			"id": 7,
			"code": "git log",
			"description": "Display the entire commit history using the default format. For customization see additional options."
		},
		{
			"id": 8,
			"code": "git diff",
			"description": "Show unstaged changes between your index and working directory."
		}
	],
	"UNDOING CHANGES": [
		{
			"id": 1,
			"code": "git revert <commit>",
			"description": "Create new commit that undoes all of the changes made in <commit>, then apply it to the current branch."
		},
		{
			"id": 2,
			"code": "git reset <file>",
			"description": "Remove <file> from the staging area, but leave the working directory unchanged. This unstages a file without overwriting any changes."
		},
		{
			"id": 3,
			"code": "git clean -n",
			"description": "Shows which files would be removed from working directory. Use the -f flag in place of the -n flag to execute the clean."
		}
	],
	"REWRITING GIT HISTORY": [
		{
			"id": 1,
			"code": "git commit --amend",
			"description": "Replace the last commit with the staged changes and last commit combined. Use with nothing staged to edit the last commit’s message."
		},
		{
			"id": 2,
			"code": "git rebase <base>",
			"description": "Rebase the current branch onto <base>. <base> can be a commit ID, branch name, a tag, or a relative reference to HEAD."
		},
		{
			"id": 3,
			"code": "git reflog",
			"description": "Show a log of changes to the local repository’s HEAD. Add --relative-date flag to show date info or --all to show all refs."
		}
	],
	"GIT BRANCHES": [
		{
			"id": 1,
			"code": "git branch",
			"description": "List all of the branches in your repo. Add a <branch> argument to create a new branch with the name <branch>."
		},
		{
			"id": 2,
			"code": "git checkout -b <branch>",
			"description": "Create and check out a new branch named <branch>. Drop the -b flag to checkout an existing branch."
		},
		{
			"id": 3,
			"code": "git merge <branch>",
			"description": "Merge <branch> into the current branch."
		}
	],
	"REMOTE REPOSITORIES": [
		{
			"id": 1,
			"code": "git remote add <name> <url>",
			"description": "Create a new connection to a remote repo. After adding a remote, you can use <name> as a shortcut for <url> in other commands."
		},
		{
			"id": 2,
			"code": "git fetch <remote> <branch>",
			"description": "Fetches a specific <branch>, from the repo. Leave off <branch> to fetch all remote refs."
		},
		{
			"id": 3,
			"code": "git pull <remote>",
			"description": "Fetch the specified remote’s copy of current branch and immediately merge it into the local copy."
		},
		{
			"id": 4,
			"code": "git push <remote> <branch>",
			"description": "Push the branch to <remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn’t exist."
		}
	]
}
